on:
  push:
    branches:
      - Joel

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    outputs:
      deployment_matrix: ${{ steps.export-deployment-matrix.outputs.deployment_matrix }}
    
    steps:
      - name: Print trigger information
        run: |
          echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
          echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x' # Specify your .NET version

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}.tar.gz" --exclude=*.git --exclude=node_modules *

      - name: Store artifact for deployment
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Export Deployment matrix
        id: export-deployment-matrix
        run: |
          echo '{
            "servers": [
              {
                "ip": "192.168.1.1",
                "username": "user1",
                "port": "22"
              },
              {
                "ip": "192.168.1.2",
                "username": "user2",
                "port": "22"
              }
            ]
          }' > deployment-matrix.json
          cat deployment-matrix.json
          echo "::set-output name=deployment_matrix::$(cat deployment-matrix.json)"

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x' # Specify your .NET version

      - name: Restore dependencies
        run: dotnet restore

      - name: Run unit tests
        run: dotnet test --no-restore --configuration Release --filter TestCategory=Unit

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x' # Specify your .NET version

      - name: Restore dependencies
        run: dotnet restore

      - name: Run integration tests
        run: dotnet test --no-restore --configuration Release --filter TestCategory=Integration

  prepare-release-on-server:
    name: Prepare Release on Server
    runs-on: ubuntu-latest
    needs: integration-tests
    strategy:
      matrix:
        server: ${{ fromJson(needs.build.outputs.deployment_matrix).servers }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app-build

      - name: Upload
        uses: nogsantos/scp-deploy@master
        with:
          src: ${{ github.sha }}.tar.gz
          host: ${{ matrix.server.ip }}
          remote: /var/www/html
          user: ${{ matrix.server.username }}
          key: ${{ secrets.fifthkey }}
          port: ${{ matrix.server.port }}