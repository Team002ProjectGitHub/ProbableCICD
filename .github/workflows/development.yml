name: CI/CD Pipeline
run-name: ${{ github.actor }} is testing out GitHub Actions
on:
  push:
    branches:
      - Karami

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Print trigger information
        run: |
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
          echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}.tar.gz" --exclude=*.git --exclude=node_modules *

      - name: Store artifact for deployment
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Debug Deployment Config
        run: cat ./deployment-config.json

      - name: Export Deployment matrix
        id: export-deployment-matrix
        run: |
          JSON=$(cat ./deployment-config.json)
          echo "Deployment JSON: $JSON"
          echo "::set-output name=deployment-matrix::$JSON"
        shell: bash

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run unit tests
        run: dotnet test --no-restore --configuration Release --filter TestCategory=Unit

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run integration tests
        run: dotnet test --no-restore --configuration Release --filter TestCategory=Integration

  prepare-release-on-server:
    name: Prepare Release on AWS Server
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-build

      - name: Upload artifact to S3 bucket
        run: aws s3 cp ${{ github.sha }}.tar.gz s3://your-bucket-name/

      - name: Deploy to EC2
        run: |
          # Replace with your instance ID and S3 bucket name
          INSTANCE_ID="i-0a3bde90e39bc6d03"
          BUCKET_NAME="ourteambucket"
          KEY_PAIR="fifthkey"
          SSH_USER="ubuntu"

          # Get the instance's public IP
          INSTANCE_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)

          # Copy the artifact from S3 to the EC2 instance
          aws s3 cp s3://$BUCKET_NAME/${{ github.sha }}.tar.gz /tmp/${{ github.sha }}.tar.gz
          scp -i $KEY_PAIR -o StrictHostKeyChecking=no /tmp/${{ github.sha }}.tar.gz $SSH_USER@$INSTANCE_PUBLIC_IP:/home/$SSH_USER/

          # Connect to the EC2 instance, extract the artifact, and deploy
          ssh -i $KEY_PAIR -o StrictHostKeyChecking=no $SSH_USER@$INSTANCE_PUBLIC_IP << EOF
            tar -xzf /home/$SSH_USER/${{ github.sha }}.tar.gz -C /var/www/html/
            cd /var/www/html
            dotnet restore
            dotnet ef database update
            sudo systemctl restart my-service
          EOF