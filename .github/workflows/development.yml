name: CI/CD Pipeline

on:
  push:
    branches:
      - Karami

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Print trigger information
        run: |
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
          echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x' # Specify your .NET version

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}.tar.gz" --exclude=*.git --exclude=node_modules *

      - name: Store artifact for deployment
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Debug Deployment Config
        run: |
          cat ./deployment-config.json

      - name: Export Deployment matrix
        id: export-deployment-matrix
        run: |
          JSON=$(cat ./deployment-config.json)
          echo "Deployment JSON: $JSON"  # Debug line to output JSON
          echo "::set-output name=deployment-matrix::$JSON"
        shell: bash

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Specify your .NET version

      - name: Restore dependencies
        run: dotnet restore

      - name: Run unit tests
        run: dotnet test --no-restore --configuration Release --filter TestCategory=Unit

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Specify your .NET version

      - name: Restore dependencies
        run: dotnet restore

      - name: Run integration tests
        run: dotnet test --no-restore --configuration Release --filter TestCategory=Integration

  prepare-release-on-server:
    name: Prepare Release on Server
    runs-on: ubuntu-latest
    needs: integration-tests
    strategy:
      matrix:
        server: ${{ fromJson(needs.integration-tests.outputs['export-deployment-matrix'].deployment-matrix).servers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-build

      - name: Upload artifact to server
        env:
          SERVER: ${{ matrix.server }}
        run: |
          scp -i ${{ secrets.fifthkey }} -o StrictHostKeyChecking=no ${{ github.sha }}.tar.gz ubuntu@${{ matrix.server.ip }}:/var/www/html/

      - name: Extract artifact on server
        run: |
          ssh -i ${{ secrets.fifthkey }} -o StrictHostKeyChecking=no ubuntu@${{ matrix.server.ip }} "tar -xzf /var/www/html/${{ github.sha }}.tar.gz -C /var/www/html/"

      - name: Install dependencies on server
        run: |
          ssh -i ${{ secrets.fifthkey }} -o StrictHostKeyChecking=no ubuntu@${{ matrix.server.ip }} "cd /var/www/html && dotnet restore"

      - name: Run database migrations on server
        run: |
          ssh -i ${{ secrets.fifthkey }} -o StrictHostKeyChecking=no ubuntu@${{ matrix.server.ip }} "cd /var/www/html && dotnet ef database update"

      - name: Restart service on server
        run: |
          ssh -i ${{ secrets.fifthkey }} -o StrictHostKeyChecking=no ubuntu@${{ matrix.server.ip }} "sudo systemctl restart my-service"